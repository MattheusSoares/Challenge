(function () {
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunklorax"] = self["webpackChunklorax"] || []).push([["default-node_modules_angular-gauge___ivy_ngcc___fesm2015_angular-gauge_js-node_modules_ngx-ec-ed0f29"], {
    /***/
    66627:
    /*!***************************************************************************!*\
      !*** ./node_modules/angular-gauge/__ivy_ngcc__/fesm2015/angular-gauge.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "GaugeModule": function GaugeModule() {
          return (
            /* binding */
            _GaugeModule
          );
        },

        /* harmony export */
        "USER_DEFAULTS": function USER_DEFAULTS() {
          return (
            /* binding */
            _USER_DEFAULTS
          );
        },

        /* harmony export */
        "defaultsFactory": function defaultsFactory() {
          return (
            /* binding */
            _defaultsFactory
          );
        },

        /* harmony export */
        "ɵa": function ɵa() {
          return (
            /* binding */
            GaugeComponent
          );
        },

        /* harmony export */
        "ɵb": function ɵb() {
          return (
            /* binding */
            GaugeDefaults
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var svg_gauge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! svg-gauge */
      80025);
      /* harmony import */


      var svg_gauge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svg_gauge__WEBPACK_IMPORTED_MODULE_0__);

      var GaugeDefaults = function GaugeDefaults() {
        _classCallCheck(this, GaugeDefaults);

        /**
         * The angle in degrees to start the dial
         */
        this.dialStartAngle = 135;
        /**
         * The angle in degrees to end the dial. This MUST be less than dialStartAngle
         */

        this.dialEndAngle = 45;
        /**
         * The radius of the gauge
         */

        this.dialRadius = 40;
        /**
         * The minimum value for the gauge
         */

        this.min = 0;
        /**
         * The maximum value for the gauge
         */

        this.max = 100;
        /**
         * Whether to show the value at the center of the gauge
         */

        this.showValue = true;
        /**
         * The CSS class of the gauge
         */

        this.gaugeClass = 'gauge';
        /**
         * The CSS class of the gauge's dial
         */

        this.dialClass = 'dial';
        /**
         * The CSS class of the gauge's fill (value dial)
         */

        this.valueDialClass = 'value';
        /**
         * 	The CSS class of the gauge's text
         */

        this.valueClass = 'value-text';
        /**
         * Whether to animate changing the gauge
         */

        this.animated = false;
      };

      var GaugeComponent = /*#__PURE__*/function () {
        function GaugeComponent(elm, defaults) {
          _classCallCheck(this, GaugeComponent);

          this.elm = elm;
          this.defaults = defaults;
          /**
           * Called when the gauge is created
           */

          this.gaugeCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
        }

        _createClass(GaugeComponent, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this = this;

            var options = {
              dialStartAngle: this.dialStartAngle,
              dialEndAngle: this.dialEndAngle,
              dialRadius: this.dialRadius,
              min: this.min,
              max: this.max,
              label: this.label,
              showValue: this.showValue,
              gaugeClass: this.gaugeClass,
              dialClass: this.dialClass,
              valueDialClass: this.valueDialClass,
              valueClass: this.valueClass,
              value: this.value,
              color: this.color
            };
            Object.keys(this.defaults).forEach(function (optionKey) {
              if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = _this.defaults[optionKey];
              }
            });
            Object.keys(options).forEach(function (optionKey) {
              if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
              }
            });
            this.gauge = svg_gauge__WEBPACK_IMPORTED_MODULE_0___default()(this.elm.nativeElement, options);
            this.gaugeCreated.emit({
              gauge: this.gauge
            });
            this.updateValue();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes['value']) {
              this.updateValue();
            }
          }
        }, {
          key: "updateValue",
          value: function updateValue() {
            if (this.gauge) {
              if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
              } else {
                this.gauge.setValue(this.value);
              }
            }
          }
        }]);

        return GaugeComponent;
      }();

      GaugeComponent.ɵfac = function GaugeComponent_Factory(t) {
        return new (t || GaugeComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](GaugeDefaults));
      };

      GaugeComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: GaugeComponent,
        selectors: [["mwl-gauge"]],
        inputs: {
          dialStartAngle: "dialStartAngle",
          dialEndAngle: "dialEndAngle",
          dialRadius: "dialRadius",
          min: "min",
          max: "max",
          label: "label",
          color: "color",
          showValue: "showValue",
          gaugeClass: "gaugeClass",
          dialClass: "dialClass",
          valueDialClass: "valueDialClass",
          valueClass: "valueClass",
          value: "value",
          animated: "animated",
          animationDuration: "animationDuration"
        },
        outputs: {
          gaugeCreated: "gaugeCreated"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
        decls: 0,
        vars: 0,
        template: function GaugeComponent_Template(rf, ctx) {},
        encapsulation: 2
      });

      GaugeComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
        }, {
          type: GaugeDefaults
        }];
      };

      GaugeComponent.propDecorators = {
        dialStartAngle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        dialEndAngle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        dialRadius: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        min: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        max: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        label: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        color: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        showValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        gaugeClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        dialClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        valueDialClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        valueClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        animated: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        animationDuration: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        gaugeCreated: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](GaugeComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
          args: [{
            selector: 'mwl-gauge',
            template: ''
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
          }, {
            type: GaugeDefaults
          }];
        }, {
          gaugeCreated: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          dialStartAngle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          dialEndAngle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          dialRadius: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          min: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          max: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          label: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          color: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          showValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          gaugeClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          dialClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          valueDialClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          valueClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          animated: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          animationDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }]
        });
      })();

      var _USER_DEFAULTS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('gauge defaults');

      function _defaultsFactory(userDefaults) {
        var defaults = new GaugeDefaults();
        Object.assign(defaults, userDefaults);
        return defaults;
      }

      var _GaugeModule = /*#__PURE__*/function () {
        function _GaugeModule() {
          _classCallCheck(this, _GaugeModule);
        }

        _createClass(_GaugeModule, null, [{
          key: "forRoot",
          value: function forRoot() {
            var userDefaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return {
              ngModule: _GaugeModule,
              providers: [{
                provide: _USER_DEFAULTS,
                useValue: userDefaults
              }, {
                provide: GaugeDefaults,
                useFactory: _defaultsFactory,
                deps: [_USER_DEFAULTS]
              }]
            };
          }
        }]);

        return _GaugeModule;
      }();

      _GaugeModule.ɵfac = function GaugeModule_Factory(t) {
        return new (t || _GaugeModule)();
      };

      _GaugeModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _GaugeModule
      });
      _GaugeModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_GaugeModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            declarations: [GaugeComponent],
            exports: [GaugeComponent]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_GaugeModule, {
          declarations: [GaugeComponent],
          exports: [GaugeComponent]
        });
      })();
      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=angular-gauge.js.map

      /***/

    },

    /***/
    93104:
    /*!***********************************************************************!*\
      !*** ./node_modules/ngx-echarts/__ivy_ngcc__/fesm2015/ngx-echarts.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "NGX_ECHARTS_CONFIG": function NGX_ECHARTS_CONFIG() {
          return (
            /* binding */
            _NGX_ECHARTS_CONFIG
          );
        },

        /* harmony export */
        "NgxEchartsDirective": function NgxEchartsDirective() {
          return (
            /* binding */
            _NgxEchartsDirective
          );
        },

        /* harmony export */
        "NgxEchartsModule": function NgxEchartsModule() {
          return (
            /* binding */
            _NgxEchartsModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! resize-observer-polyfill */
      66219);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      41964);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      66149);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      872);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      37540);

      var ChangeFilter = /*#__PURE__*/function () {
        function ChangeFilter(changes) {
          _classCallCheck(this, ChangeFilter);

          this.changes = changes;
        }

        _createClass(ChangeFilter, [{
          key: "notEmpty",
          value: function notEmpty(key) {
            if (this.changes[key]) {
              var value = this.changes[key].currentValue;

              if (value !== undefined && value !== null) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(value);
              }
            }

            return rxjs__WEBPACK_IMPORTED_MODULE_2__.EMPTY;
          }
        }, {
          key: "has",
          value: function has(key) {
            if (this.changes[key]) {
              var value = this.changes[key].currentValue;
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(value);
            }

            return rxjs__WEBPACK_IMPORTED_MODULE_2__.EMPTY;
          }
        }, {
          key: "notFirst",
          value: function notFirst(key) {
            if (this.changes[key] && !this.changes[key].isFirstChange()) {
              var value = this.changes[key].currentValue;
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(value);
            }

            return rxjs__WEBPACK_IMPORTED_MODULE_2__.EMPTY;
          }
        }, {
          key: "notFirstAndEmpty",
          value: function notFirstAndEmpty(key) {
            if (this.changes[key] && !this.changes[key].isFirstChange()) {
              var value = this.changes[key].currentValue;

              if (value !== undefined && value !== null) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(value);
              }
            }

            return rxjs__WEBPACK_IMPORTED_MODULE_2__.EMPTY;
          }
        }], [{
          key: "of",
          value: function of(changes) {
            return new ChangeFilter(changes);
          }
        }]);

        return ChangeFilter;
      }();

      var _NGX_ECHARTS_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.InjectionToken('NGX_ECHARTS_CONFIG');

      var _NgxEchartsDirective = /*#__PURE__*/function () {
        function NgxEchartsDirective(config, el, ngZone) {
          _classCallCheck(this, NgxEchartsDirective);

          this.el = el;
          this.ngZone = ngZone;
          this.autoResize = true;
          this.loadingType = 'default'; // ngx-echarts events

          this.chartInit = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
          this.optionsError = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter(); // echarts mouse events

          this.chartClick = this.createLazyEvent('click');
          this.chartDblClick = this.createLazyEvent('dblclick');
          this.chartMouseDown = this.createLazyEvent('mousedown');
          this.chartMouseMove = this.createLazyEvent('mousemove');
          this.chartMouseUp = this.createLazyEvent('mouseup');
          this.chartMouseOver = this.createLazyEvent('mouseover');
          this.chartMouseOut = this.createLazyEvent('mouseout');
          this.chartGlobalOut = this.createLazyEvent('globalout');
          this.chartContextMenu = this.createLazyEvent('contextmenu'); // echarts mouse events

          this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');
          this.chartLegendSelected = this.createLazyEvent('legendselected');
          this.chartLegendUnselected = this.createLazyEvent('legendunselected');
          this.chartLegendScroll = this.createLazyEvent('legendscroll');
          this.chartDataZoom = this.createLazyEvent('datazoom');
          this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');
          this.chartTimelineChanged = this.createLazyEvent('timelinechanged');
          this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');
          this.chartRestore = this.createLazyEvent('restore');
          this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');
          this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');
          this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');
          this.chartPieSelected = this.createLazyEvent('pieselected');
          this.chartPieUnselected = this.createLazyEvent('pieunselected');
          this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');
          this.chartMapSelected = this.createLazyEvent('mapselected');
          this.chartMapUnselected = this.createLazyEvent('mapunselected');
          this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');
          this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');
          this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');
          this.chartBrush = this.createLazyEvent('brush');
          this.chartBrushEnd = this.createLazyEvent('brushend');
          this.chartBrushSelected = this.createLazyEvent('brushselected');
          this.chartRendered = this.createLazyEvent('rendered');
          this.chartFinished = this.createLazyEvent('finished');
          this.animationFrameID = null;
          this.echarts = config.echarts;
        }

        _createClass(NgxEchartsDirective, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var _this2 = this;

            var filter = ChangeFilter.of(changes);
            filter.notFirstAndEmpty('options').subscribe(function (opt) {
              return _this2.onOptionsChange(opt);
            });
            filter.notFirstAndEmpty('merge').subscribe(function (opt) {
              return _this2.setOption(opt);
            });
            filter.has('loading').subscribe(function (v) {
              return _this2.toggleLoading(!!v);
            });
            filter.notFirst('theme').subscribe(function () {
              return _this2.refreshChart();
            });
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this3 = this;

            if (this.autoResize) {
              this.resizeSub = new resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__["default"](function () {
                _this3.animationFrameID = window.requestAnimationFrame(function () {
                  return _this3.resize();
                });
              });
              this.resizeSub.observe(this.el.nativeElement);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.resizeSub) {
              this.resizeSub.unobserve(this.el.nativeElement);
              window.cancelAnimationFrame(this.animationFrameID);
            }

            this.dispose();
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this4 = this;

            setTimeout(function () {
              return _this4.initChart();
            });
          }
        }, {
          key: "dispose",
          value: function dispose() {
            if (this.chart) {
              this.chart.dispose();
              this.chart = null;
            }
          }
          /**
           * resize chart
           */

        }, {
          key: "resize",
          value: function resize() {
            if (this.chart) {
              this.chart.resize();
            }
          }
        }, {
          key: "toggleLoading",
          value: function toggleLoading(loading) {
            if (this.chart) {
              loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();
            }
          }
        }, {
          key: "setOption",
          value: function setOption(option, opts) {
            if (this.chart) {
              try {
                this.chart.setOption(option, opts);
              } catch (e) {
                console.error(e);
                this.optionsError.emit(e);
              }
            }
          }
          /**
           * dispose old chart and create a new one.
           */

        }, {
          key: "refreshChart",
          value: function refreshChart() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      this.dispose();
                      _context.next = 3;
                      return this.initChart();

                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));
          }
        }, {
          key: "createChart",
          value: function createChart() {
            var _this5 = this;

            var dom = this.el.nativeElement;

            if (window && window.getComputedStyle) {
              var prop = window.getComputedStyle(dom, null).getPropertyValue('height');

              if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {
                dom.style.height = '400px';
              }
            } // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise
            // otherwise create the function that imitates behaviour above with a provided as is module


            return this.ngZone.runOutsideAngular(function () {
              var load = typeof _this5.echarts === 'function' ? _this5.echarts : function () {
                return Promise.resolve(_this5.echarts);
              };
              return load().then(function (_ref) {
                var init = _ref.init;
                return init(dom, _this5.theme, _this5.initOpts);
              });
            });
          }
        }, {
          key: "initChart",
          value: function initChart() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return this.onOptionsChange(this.options);

                    case 2:
                      if (this.merge && this.chart) {
                        this.setOption(this.merge);
                      }

                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));
          }
        }, {
          key: "onOptionsChange",
          value: function onOptionsChange(opt) {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      if (opt) {
                        _context3.next = 2;
                        break;
                      }

                      return _context3.abrupt("return");

                    case 2:
                      if (!this.chart) {
                        _context3.next = 6;
                        break;
                      }

                      this.setOption(this.options, true);
                      _context3.next = 11;
                      break;

                    case 6:
                      _context3.next = 8;
                      return this.createChart();

                    case 8:
                      this.chart = _context3.sent;
                      this.chartInit.emit(this.chart);
                      this.setOption(this.options, true);

                    case 11:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));
          } // allows to lazily bind to only those events that are requested through the `@Output` by parent components
          // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info

        }, {
          key: "createLazyEvent",
          value: function createLazyEvent(eventName) {
            var _this6 = this;

            return this.chartInit.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (chart) {
              return new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable(function (observer) {
                chart.on(eventName, function (data) {
                  return _this6.ngZone.run(function () {
                    return observer.next(data);
                  });
                });
                return function () {
                  return chart.off(eventName);
                };
              });
            }));
          }
        }]);

        return NgxEchartsDirective;
      }();

      _NgxEchartsDirective.ɵfac = function NgxEchartsDirective_Factory(t) {
        return new (t || _NgxEchartsDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_NGX_ECHARTS_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone));
      };

      _NgxEchartsDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: _NgxEchartsDirective,
        selectors: [["echarts"], ["", "echarts", ""]],
        inputs: {
          autoResize: "autoResize",
          loadingType: "loadingType",
          options: "options",
          theme: "theme",
          loading: "loading",
          initOpts: "initOpts",
          merge: "merge",
          loadingOpts: "loadingOpts"
        },
        outputs: {
          chartInit: "chartInit",
          optionsError: "optionsError",
          chartClick: "chartClick",
          chartDblClick: "chartDblClick",
          chartMouseDown: "chartMouseDown",
          chartMouseMove: "chartMouseMove",
          chartMouseUp: "chartMouseUp",
          chartMouseOver: "chartMouseOver",
          chartMouseOut: "chartMouseOut",
          chartGlobalOut: "chartGlobalOut",
          chartContextMenu: "chartContextMenu",
          chartLegendSelectChanged: "chartLegendSelectChanged",
          chartLegendSelected: "chartLegendSelected",
          chartLegendUnselected: "chartLegendUnselected",
          chartLegendScroll: "chartLegendScroll",
          chartDataZoom: "chartDataZoom",
          chartDataRangeSelected: "chartDataRangeSelected",
          chartTimelineChanged: "chartTimelineChanged",
          chartTimelinePlayChanged: "chartTimelinePlayChanged",
          chartRestore: "chartRestore",
          chartDataViewChanged: "chartDataViewChanged",
          chartMagicTypeChanged: "chartMagicTypeChanged",
          chartPieSelectChanged: "chartPieSelectChanged",
          chartPieSelected: "chartPieSelected",
          chartPieUnselected: "chartPieUnselected",
          chartMapSelectChanged: "chartMapSelectChanged",
          chartMapSelected: "chartMapSelected",
          chartMapUnselected: "chartMapUnselected",
          chartAxisAreaSelected: "chartAxisAreaSelected",
          chartFocusNodeAdjacency: "chartFocusNodeAdjacency",
          chartUnfocusNodeAdjacency: "chartUnfocusNodeAdjacency",
          chartBrush: "chartBrush",
          chartBrushEnd: "chartBrushEnd",
          chartBrushSelected: "chartBrushSelected",
          chartRendered: "chartRendered",
          chartFinished: "chartFinished"
        },
        exportAs: ["echarts"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵNgOnChangesFeature"]]
      });

      _NgxEchartsDirective.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
            args: [_NGX_ECHARTS_CONFIG]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone
        }];
      };

      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "options", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "theme", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "loading", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "initOpts", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "merge", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "autoResize", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "loadingType", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input)()], _NgxEchartsDirective.prototype, "loadingOpts", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartInit", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "optionsError", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartClick", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartDblClick", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMouseDown", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMouseMove", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMouseUp", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMouseOver", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMouseOut", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartGlobalOut", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartContextMenu", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartLegendSelectChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartLegendSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartLegendUnselected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartLegendScroll", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartDataZoom", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartDataRangeSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartTimelineChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartTimelinePlayChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartRestore", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartDataViewChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMagicTypeChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartPieSelectChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartPieSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartPieUnselected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMapSelectChanged", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMapSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartMapUnselected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartAxisAreaSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartFocusNodeAdjacency", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartUnfocusNodeAdjacency", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartBrush", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartBrushEnd", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartBrushSelected", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartRendered", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output)()], _NgxEchartsDirective.prototype, "chartFinished", void 0);
      _NgxEchartsDirective = (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, tslib__WEBPACK_IMPORTED_MODULE_4__.__param)(0, (0, _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject)(_NGX_ECHARTS_CONFIG))], _NgxEchartsDirective);
      var NgxEchartsModule_1;

      var _NgxEchartsModule = NgxEchartsModule_1 = /*#__PURE__*/function () {
        function NgxEchartsModule() {
          _classCallCheck(this, NgxEchartsModule);
        }

        _createClass(NgxEchartsModule, null, [{
          key: "forRoot",
          value: function forRoot(config) {
            return {
              ngModule: NgxEchartsModule_1,
              providers: [{
                provide: _NGX_ECHARTS_CONFIG,
                useValue: config
              }]
            };
          }
        }, {
          key: "forChild",
          value: function forChild() {
            return {
              ngModule: NgxEchartsModule_1
            };
          }
        }]);

        return NgxEchartsModule;
      }();

      _NgxEchartsModule.ɵfac = function NgxEchartsModule_Factory(t) {
        return new (t || _NgxEchartsModule)();
      };

      _NgxEchartsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
        type: _NgxEchartsModule
      });
      _NgxEchartsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
        imports: [[]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](_NgxEchartsDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Directive,
          args: [{
            selector: 'echarts, [echarts]',
            exportAs: 'echarts'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
              args: [_NGX_ECHARTS_CONFIG]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone
          }];
        }, {
          autoResize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          loadingType: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          chartInit: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          optionsError: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartDblClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMouseDown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMouseMove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMouseUp: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMouseOver: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMouseOut: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartGlobalOut: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartContextMenu: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartLegendSelectChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartLegendSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartLegendUnselected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartLegendScroll: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartDataZoom: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartDataRangeSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartTimelineChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartTimelinePlayChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartRestore: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartDataViewChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMagicTypeChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartPieSelectChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartPieSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartPieUnselected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMapSelectChanged: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMapSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartMapUnselected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartAxisAreaSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartFocusNodeAdjacency: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartUnfocusNodeAdjacency: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartBrush: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartBrushEnd: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartBrushSelected: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartRendered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          chartFinished: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          theme: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          loading: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          initOpts: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          merge: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }],
          loadingOpts: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input
          }]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](_NgxEchartsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgModule,
          args: [{
            imports: [],
            declarations: [_NgxEchartsDirective],
            exports: [_NgxEchartsDirective]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](_NgxEchartsModule, {
          declarations: [_NgxEchartsDirective],
          exports: [_NgxEchartsDirective]
        });
      })();
      /*
       * Public API Surface of ngx-echarts
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ngx-echarts.js.map

      /***/

    },

    /***/
    80025:
    /*!*****************************************!*\
      !*** ./node_modules/svg-gauge/index.js ***!
      \*****************************************/

    /***/
    function _(module, __unused_webpack_exports, __webpack_require__) {
      module.exports = __webpack_require__(
      /*! ./src/gauge */
      69517);
      /***/
    },

    /***/
    69517:
    /*!*********************************************!*\
      !*** ./node_modules/svg-gauge/src/gauge.js ***!
      \*********************************************/

    /***/
    function _(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_RESULT__;
      /* global window, define, module */


      (function (global, factory) {
        var Gauge = factory(global);

        if (true) {
          // AMD support
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return Gauge;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(typeof window === "undefined" ? this : window, function (global, undefined) {
        var document = global.document,
            slice = Array.prototype.slice,
            requestAnimationFrame = global.requestAnimationFrame || global.mozRequestAnimationFrame || global.webkitRequestAnimationFrame || global.msRequestAnimationFrame || function (cb) {
          return setTimeout(cb, 1000 / 60);
        }; // EXPERIMENTAL!!

        /**
         * Simplistic animation function for animating the gauge. That's all!
         * Options are:
         * {
         *  duration: 1,    // In seconds
         *  start: 0,       // The start value
         *  end: 100,       // The end value
         *  step: function, // REQUIRED! The step function that will be passed the value and does something
         *  easing: function // The easing function. Default is easeInOutCubic
         * }
         */


        function Animation(options) {
          var duration = options.duration,
              currentIteration = 1,
              iterations = 60 * duration,
              start = options.start || 0,
              end = options.end,
              change = end - start,
              step = options.step,
              easing = options.easing || function easeInOutCubic(pos) {
            // https://github.com/danro/easing-js/blob/master/easing.js
            if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 3);
            return 0.5 * (Math.pow(pos - 2, 3) + 2);
          };

          function animate() {
            var progress = currentIteration / iterations,
                value = change * easing(progress) + start; // console.log(progress + ", " + value);

            step(value, currentIteration);
            currentIteration += 1;

            if (progress < 1) {
              requestAnimationFrame(animate);
            }
          } // start!


          requestAnimationFrame(animate);
        }

        var Gauge = function () {
          var SVG_NS = "http://www.w3.org/2000/svg";
          var GaugeDefaults = {
            centerX: 50,
            centerY: 50
          };
          var defaultOptions = {
            dialRadius: 40,
            dialStartAngle: 135,
            dialEndAngle: 45,
            value: 0,
            max: 100,
            min: 0,
            valueDialClass: "value",
            valueClass: "value-text",
            dialClass: "dial",
            gaugeClass: "gauge",
            showValue: true,
            gaugeColor: null,
            label: function label(val) {
              return Math.round(val);
            }
          };

          function shallowCopy() {
            var target = arguments[0],
                sources = slice.call(arguments, 1);
            sources.forEach(function (s) {
              for (var k in s) {
                if (s.hasOwnProperty(k)) {
                  target[k] = s[k];
                }
              }
            });
            return target;
          }
          /**
           * A utility function to create SVG dom tree
           * @param {String} name The SVG element name
           * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth
           * @param {Array} children An array of children (can be created by this same function)
           * @return The SVG element
           */


          function svg(name, attrs, children) {
            var elem = document.createElementNS(SVG_NS, name);

            for (var attrName in attrs) {
              elem.setAttribute(attrName, attrs[attrName]);
            }

            if (children) {
              children.forEach(function (c) {
                elem.appendChild(c);
              });
            }

            return elem;
          }
          /**
           * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%
           * will be 90deg
           */


          function getAngle(percentage, gaugeSpanAngle) {
            return percentage * gaugeSpanAngle / 100;
          }

          function normalize(value, min, limit) {
            var val = Number(value);
            if (val > limit) return limit;
            if (val < min) return min;
            return val;
          }

          function getValueInPercentage(value, min, max) {
            var newMax = max - min,
                newVal = value - min;
            return 100 * newVal / newMax; // var absMin = Math.abs(min);
            // return 100 * (absMin + value) / (max + absMin);
          }
          /**
           * Gets cartesian co-ordinates for a specified radius and angle (in degrees)
           * @param cx {Number} The center x co-oriinate
           * @param cy {Number} The center y co-ordinate
           * @param radius {Number} The radius of the circle
           * @param angle {Number} The angle in degrees
           * @return An object with x,y co-ordinates
           */


          function getCartesian(cx, cy, radius, angle) {
            var rad = angle * Math.PI / 180;
            return {
              x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,
              y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000
            };
          } // Returns start and end points for dial
          // i.e. starts at 135deg ends at 45deg with large arc flag
          // REMEMBER!! angle=0 starts on X axis and then increases clockwise


          function getDialCoords(radius, startAngle, endAngle) {
            var cx = GaugeDefaults.centerX,
                cy = GaugeDefaults.centerY;
            return {
              end: getCartesian(cx, cy, radius, endAngle),
              start: getCartesian(cx, cy, radius, startAngle)
            };
          }
          /**
           * Creates a Gauge object. This should be called without the 'new' operator. Various options
           * can be passed for the gauge:
           * {
           *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg
           *    dialEndAngle: The angle to end the dial. Default 45deg
           *    radius: The gauge's radius. Default 400
           *    max: The maximum value of the gauge. Default 100
           *    value: The starting value of the gauge. Default 0
           *    label: The function on how to render the center label (Should return a value)
           * }
           * @param {Element} elem The DOM into which to render the gauge
           * @param {Object} opts The gauge options
           * @return a Gauge object
           */


          return function Gauge(elem, opts) {
            opts = shallowCopy({}, defaultOptions, opts);
            var gaugeContainer = elem,
                limit = opts.max,
                min = opts.min,
                value = normalize(opts.value, min, limit),
                radius = opts.dialRadius,
                displayValue = opts.showValue,
                startAngle = opts.dialStartAngle,
                endAngle = opts.dialEndAngle,
                valueDialClass = opts.valueDialClass,
                valueTextClass = opts.valueClass,
                valueLabelClass = opts.valueLabelClass,
                dialClass = opts.dialClass,
                gaugeClass = opts.gaugeClass,
                gaugeColor = opts.color,
                gaugeValueElem,
                gaugeValuePath,
                label = opts.label,
                viewBox = opts.viewBox,
                instance;

            if (startAngle < endAngle) {
              console.log("WARN! startAngle < endAngle, Swapping");
              var tmp = startAngle;
              startAngle = endAngle;
              endAngle = tmp;
            }

            function pathString(radius, startAngle, endAngle, largeArc) {
              var coords = getDialCoords(radius, startAngle, endAngle),
                  start = coords.start,
                  end = coords.end,
                  largeArcFlag = typeof largeArc === "undefined" ? 1 : largeArc;
              return ["M", start.x, start.y, "A", radius, radius, 0, largeArcFlag, 1, end.x, end.y].join(" ");
            }

            function initializeGauge(elem) {
              gaugeValueElem = svg("text", {
                x: 50,
                y: 50,
                fill: "#999",
                "class": valueTextClass,
                "font-size": "100%",
                "font-family": "sans-serif",
                "font-weight": "normal",
                "text-anchor": "middle",
                "alignment-baseline": "middle",
                "dominant-baseline": "central"
              });
              gaugeValuePath = svg("path", {
                "class": valueDialClass,
                fill: "none",
                stroke: "#666",
                "stroke-width": 2.5,
                d: pathString(radius, startAngle, startAngle) // value of 0

              });
              var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));
              var flag = angle <= 180 ? 0 : 1;
              var gaugeElement = svg("svg", {
                "viewBox": viewBox || "0 0 100 100",
                "class": gaugeClass
              }, [svg("path", {
                "class": dialClass,
                fill: "none",
                stroke: "#eee",
                "stroke-width": 2,
                d: pathString(radius, startAngle, endAngle, flag)
              }), gaugeValueElem, gaugeValuePath]);
              elem.appendChild(gaugeElement);
            }

            function updateGauge(theValue, frame) {
              var val = getValueInPercentage(theValue, min, limit),
                  // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),
              angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),
                  // this is because we are using arc greater than 180deg
              flag = angle <= 180 ? 0 : 1;

              if (displayValue) {
                gaugeValueElem.textContent = label.call(opts, theValue);
              }

              gaugeValuePath.setAttribute("d", pathString(radius, startAngle, angle + startAngle, flag));
            }

            function setGaugeColor(value, duration) {
              var c = gaugeColor(value),
                  dur = duration * 1000,
                  pathTransition = "stroke " + dur + "ms ease"; // textTransition = "fill " + dur + "ms ease";

              gaugeValuePath.style = ["stroke: " + c, "-webkit-transition: " + pathTransition, "-moz-transition: " + pathTransition, "transition: " + pathTransition].join(";");
              /*
              gaugeValueElem.style = [
                "fill: " + c,
                "-webkit-transition: " + textTransition,
                "-moz-transition: " + textTransition,
                "transition: " + textTransition,
              ].join(";");
              */
            }

            instance = {
              setMaxValue: function setMaxValue(max) {
                limit = max;
              },
              setValue: function setValue(val) {
                value = normalize(val, min, limit);

                if (gaugeColor) {
                  setGaugeColor(value, 0);
                }

                updateGauge(value);
              },
              setValueAnimated: function setValueAnimated(val, duration) {
                var oldVal = value;
                value = normalize(val, min, limit);

                if (oldVal === value) {
                  return;
                }

                if (gaugeColor) {
                  setGaugeColor(value, duration);
                }

                Animation({
                  start: oldVal || 0,
                  end: value,
                  duration: duration || 1,
                  step: function step(val, frame) {
                    updateGauge(val, frame);
                  }
                });
              },
              getValue: function getValue() {
                return value;
              }
            };
            initializeGauge(gaugeContainer);
            instance.setValue(value);
            return instance;
          };
        }();

        return Gauge;
      });
      /***/

    }
  }]);
})();
//# sourceMappingURL=default-node_modules_angular-gauge___ivy_ngcc___fesm2015_angular-gauge_js-node_modules_ngx-ec-ed0f29-es5.js.map