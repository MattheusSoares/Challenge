{"version":3,"sources":["webpack:///src/app/core/models/employee.model.ts","webpack:///src/app/core/service/attibute.type.service.ts","webpack:///src/app/core/service/attribute.category.service.ts","webpack:///src/app/core/service/attribute.service.ts","webpack:///src/app/core/service/employee.attribute.service.ts","webpack:///src/app/core/service/employee.role.service.ts","webpack:///src/app/core/service/employee.service.ts","webpack:///src/app/shared/components/component.module.ts","webpack:///src/app/shared/components/custom-table/custom-table.component.html","webpack:///src/app/shared/components/custom-table/custom-table.component.ts","webpack:///src/app/views/contacts/contacts.model.ts","webpack:///src/app/views/contacts/contacts.service.ts","webpack:///src/app/views/employees/delete/delete.component.ts","webpack:///src/app/views/employees/delete/delete.component.html","webpack:///src/app/views/employees/employee-detalhes/employee-detalhes.component.html","webpack:///src/app/views/employees/employee-detalhes/employee-detalhes.component.ts","webpack:///src/app/views/employees/employee-routing.module.ts","webpack:///src/app/views/employees/employee.component.html","webpack:///src/app/views/employees/employee.component.ts","webpack:///src/app/views/employees/employee.module.ts","webpack:///src/app/views/employees/form/form.component.html","webpack:///src/app/views/employees/form/form.component.ts"],"names":["Employee","AttributeTypeService","baseUrl","http","get","id","AttributeCategoryService","AttributeService","EmployeeAttributeService","employeeId","body","post","EmployeeRoleService","EmployeeService","ComponentModule","provide","MatPaginatorIntl","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatButtonModule","MatIconModule","MatSortModule","MatMenuModule","MatTabsModule","MatDialogModule","MatSlideToggleModule","MatProgressSpinnerModule","CustomTableComponent","dialog","showAddButton","addNew","EventEmitter","edit","cancel","enable","isTblLoading","dataSource","sort","paginator","subs","sink","fromEvent","filter","nativeElement","subscribe","value","columns","o","visible","map","property","emit","event","customPaginatorIntl","itemsPerPageLabel","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","trigger","state","style","height","minHeight","transition","animate","Contacts","contacts","getRandomID","img","avatar","name","email","birthDate","formatDate","Date","address","mobile","note","S4","Math","random","toString","substring","ContactsService","httpClient","API_URL","dataChange","BehaviorSubject","dialogData","data","next","error","console","log","message","EmployeeDeleteComponent","dialogRef","contactsService","close","deleteContacts","MAT_DIALOG_DATA","confirmDelete","onNoClick","EmployeeDetalhesComponent","employeeService","employeeRoleService","employeeAttributeService","attributeService","attributeTypeService","attributeCategoryService","snackBar","route","notifierService","pieChart","tooltip","formatter","legend","textStyle","color","padding","series","type","radius","center","employeeDisplay","employee","listaEmployeeAttributeDiff","tableContent","attributeCategories","FormControl","filtersTypes","filtersCategories","tb2columns","prop","tb2data","tb2filteredData","notifier","controlNewScoreCategories","controlNewScoreTypes","controlNewScoreAttributes","controlNewScoreValue","employeelId","snapshot","paramMap","tb2fetch","getEmployeeRoles","getEmployeeAttribute","getById","response","employeeRole","employeeRoles","forEach","element","employeeRoleId","description","firstName","photoUrl","role","getAll","getEmployeeData","getByEmployeeId","listaEmployeeAttribute","getAllAttributes","length","tableContentFiltered","includes","attributeName","push","populateTb2","modalNewScore","newScoreForm","FormGroup","newScoreAttributeCategories","open","width","newScoreAttributeTypes","newScoreAttributes","newScoreValues","getByAttributeCategoryId","getByAttributeTypeId","scoreHelper","split","allowedScores","newScoreValuesMapped","allowedScoresValue","index","scoreHelperValue","score","valid","payload","attributeId","parseInt","postSaveEmployeeAttribute","notify","err","closeAll","attributes","attribute","createdAt","item","pos","indexOf","cb","req","XMLHttpRequest","onload","JSON","parse","send","val","target","toLowerCase","colsAmt","keys","Object","table2","offset","DatatableComponent","filterSelect","saveNewScore","routes","path","component","EmployeeComponent","EmployeeRoutingModule","RouterModule","$event","stopPropagation","selection","filterToggle","displayedColumns","MatTableDataSource","SelectionModel","employees","contextMenuPosition","x","y","loadData","colaboradores","navigate","row","tempDirection","localStorage","getItem","EmployeeFormComponent","action","direction","_changePageSize","pageSize","numSelected","selected","numRows","isAllSelected","clear","select","getEmployers","colorName","text","placementFrom","placementAlign","duration","verticalPosition","horizontalPosition","panelClass","MatMenuTrigger","refresh","EmployeeModule","SnackbarComponent","OwlDateTimeIntl","AdvanceTableRoutingModule","MatSnackBarModule","MatRadioModule","MatSelectModule","MatCheckboxModule","MatCardModule","MatDatepickerModule","MatToolbarModule","MaterialFileInputModule","NgxDatatableModule","NgxEchartsModule","echarts","fb","isDetails","formControl","Validators","dialogTitle","contactsForm","createContactForm","hasError","group","addContacts","getRawValue"],"mappings":"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iBAED,sBAAarL,KAAb,EAAkB;AAChB;AACA,iBAAK2D,KAAL,CAAWgI,QAAX,CAAoB,CAAC,wBAAwB3L,KAAK,CAACpD,EAA/B,CAApB;AACD;;;iBAED,kBAAS,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;iBACD,qBAAYgP,GAAZ,EAAiB;AACf,gBAAIC,aAAJ;;AACA,gBAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,MAAtC,EAA8C;AAC5CF,2BAAa,GAAG,KAAhB;AACD,aAFD,MAEO;AACLA,2BAAa,GAAG,KAAhB;AACD;;AACD,iBAAKrN,MAAL,CAAYiJ,IAAZ,CAAiB,kDAAAuE,qBAAjB,EAAwC;AACtC3J,kBAAI,EAAE;AACJvB,wBAAQ,EAAE8K,GADN;AAEJK,sBAAM,EAAE;AAFJ,eADgC;AAKtCC,uBAAS,EAAEL,aAL2B;AAMtCpL,oBAAM,EAAE,KAN8B;AAOtCiH,mBAAK,EAAE;AAP+B,aAAxC;AASD;;;iBACD,oBAAWkE,GAAX,EAAgB,CACd;AACD;;;iBACD,kBAASA,GAAT,EAAc,CACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;iBACD,oBAAWA,GAAX,EAAgB,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;iBACO,wBAAe;AACrB,iBAAK1M,SAAL,CAAeiN,eAAf,CAA+B,KAAKjN,SAAL,CAAekN,QAA9C;AACD;AACD;;;;iBACA,yBAAgB;AACd,gBAAMC,WAAW,GAAG,KAAKrB,SAAL,CAAesB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","file":"src_app_views_employees_employee_module_ts-es5.js","sourcesContent":["export class Employee {\r\n  id: string;\r\n  firstName: string;\r\n  email: string;\r\n  photoUrl: string;\r\n  employeeRoleId: string;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Attribute } from '@angular/compiler';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AttributeTypeService {\r\n\r\n    readonly baseUrl: string;\r\n\r\n    constructor(\r\n        @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n        private http: HttpClient) {\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    getAll(): Observable<any> {\r\n        return this.http.get<any>(`${this.baseUrl}/AttributeType`);\r\n    }\r\n\r\n    getByAttributeCategoryId(id: string): Observable<any[]> {\r\n        return this.http.get<any[]>(`${this.baseUrl}/AttributeType/attribute-category/${id}`);\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Attribute } from '@angular/compiler';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AttributeCategoryService {\r\n\r\n    readonly baseUrl: string;\r\n\r\n    constructor(\r\n        @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n        private http: HttpClient) {\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    getAll(): Observable<any> {\r\n        return this.http.get<any>(`${this.baseUrl}/AttributeCategory`);\r\n    }\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Attribute } from '../models/attribute.model';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AttributeService {\r\n\r\n    readonly baseUrl: string;\r\n\r\n    constructor(\r\n        @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n        private http: HttpClient) {\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    getAll(): Observable<Attribute[]> {\r\n        return this.http.get<Attribute[]>(`${this.baseUrl}/Attribute`);\r\n    }\r\n\r\n    getByAttributeTypeId(id: string): Observable<any[]> {\r\n        return this.http.get<any[]>(`${this.baseUrl}/Attribute/attribute-type/${id}`);\r\n    }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Attribute } from '@angular/compiler';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EmployeeAttribute } from '../models/employee-attribute.model';\r\nimport { ProcessEmployeeAttribute } from '../models/process-employee-attributes.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeAttributeService {\r\n\r\n  readonly baseUrl: string;\r\n\r\n  constructor(\r\n    @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n    private http: HttpClient) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  getByEmployeeId(employeeId): Observable<EmployeeAttribute[]> {\r\n    return this.http.get<EmployeeAttribute[]>(`${this.baseUrl}/EmployeeAttribute/employee/${employeeId}`);\r\n  }\r\n\r\n  getByEmployeeProcessAttributes(body): Observable<ProcessEmployeeAttribute> {\r\n    return this.http.post<ProcessEmployeeAttribute>(`${this.baseUrl}/EmployeeAttribute/process-employee-attributes`, body);\r\n  }\r\n\r\n  postSaveEmployeeAttribute(body): Observable<any>{\r\n    return this.http.post<any>(`${this.baseUrl}/EmployeeAttribute`, body);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EmployeeRole } from '../models/employee-role.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class EmployeeRoleService {\r\n\r\n    readonly baseUrl: string;\r\n\r\n    constructor(\r\n        @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n        private http: HttpClient) {\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    getAll(): Observable<EmployeeRole[]> {\r\n        return this.http.get<EmployeeRole[]>(`${this.baseUrl}/EmployeeRole`);\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Employee } from '../models/employee.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  readonly baseUrl: string;\r\n\r\n  constructor(\r\n    @Inject('BASE_URL_CHALLENGE') baseUrl: string,\r\n    private http: HttpClient) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  getAll(): Observable<Employee[]> {\r\n    return this.http.get<Employee[]>(`${this.baseUrl}/Employee`);\r\n  }\r\n\r\n  getById(id: string): Observable<Employee>{\r\n    return this.http.get<Employee>(`${this.baseUrl}/Employee/${id}`);\r\n  }\r\n}\r\n","import { CommonModule, CurrencyPipe } from '@angular/common';\r\nimport { LOCALE_ID, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorIntl, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CustomTableComponent } from './custom-table/custom-table.component';\r\n@NgModule({\r\n    declarations: [CustomTableComponent],\r\n    exports: [CustomTableComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatTabsModule,\r\n        MatDialogModule,\r\n        MatSlideToggleModule,\r\n        MatProgressSpinnerModule\r\n    ],\r\n    providers: [\r\n        { provide: MatPaginatorIntl }\r\n    ]\r\n})\r\nexport class ComponentModule { }\r\n","<div class=\"responsive_table\">\r\n  <div class=\"materialTableHeader\">\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <ul class=\"header-buttons-left ml-0\">\r\n          <li class=\"dropdown m-l-20\">\r\n            <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\r\n            <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\"\r\n              aria-label=\"Search box\">\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <ul class=\"header-buttons\">\r\n          <li>\r\n            <div class=\"icon-button-demo\">\r\n              <button mat-mini-fab color=\"primary\" (click)=\"add()\" *ngIf=\"showAddButton\">\r\n                <mat-icon class=\"col-white\">add</mat-icon>\r\n              </button>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <mat-table #table [dataSource]=\"dataSource\" matSort multiTemplateDataRows class=\"mat-cell\">\r\n    <ng-container *ngFor=\"let column of columns\">\r\n      <ng-container *ngIf=\"column.isModelProperty\" [matColumnDef]=\"column.property\">\r\n        <mat-header-cell *matHeaderCellDef mat-header-cell mat-sort-header>\r\n          {{ column.name }}</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\" mat-cell>\r\n          <ng-container *ngIf=\"column.type==='date'\">\r\n            {{ row[column.property] | date: 'dd/MM/yyyy hh:mm' }}\r\n          </ng-container>\r\n          <ng-container *ngIf=\"column.type!=='date' && column.type !== 'currency' && column.type!=='color'\">\r\n            {{ row[column.property] }}\r\n          </ng-container>\r\n          <ng-container *ngIf=\"column.type==='currency'\">\r\n            {{row[column.property] | currency:'BRL'}}\r\n          </ng-container>\r\n          <ng-container *ngIf=\"column.type==='color'\">\r\n            <div style=\"width: 20px; height: 20px; border-radius: 50%; background-color: {{row[column.property]}};\"></div>\r\n          </ng-container>\r\n        </mat-cell>\r\n      </ng-container>\r\n    </ng-container>\r\n\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"editCall(row)\"\r\n                  [style.cursor]=\"'pointer'\" matRipple>\r\n    </mat-row>\r\n\r\n\r\n    <!-- <ng-container matColumnDef=\"edit\">\r\n      <mat-header-cell *matHeaderCellDef class=\"pr-0\">Editar</mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row; let i=index;\" class=\"pr-0\">\r\n        <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)=\"$event.stopPropagation()\"\r\n          (click)=\"editCall(row)\">\r\n          <mat-icon aria-label=\"Edit\" class=\"col-white\">edit</mat-icon>\r\n        </button>\r\n      </mat-cell>\r\n    </ng-container> -->\r\n  </mat-table>\r\n  \r\n  <div class=\"empty\" *ngIf=\"!isTblLoading && this.dataSource.data.length === 0\">\r\n    Não existem dados para serem exibidos\r\n  </div>\r\n\r\n  <!-- Loading spinner -->\r\n  <div *ngIf=\"isTblLoading\" class=\"tbl-spinner\">\r\n    <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\r\n    </mat-progress-spinner>\r\n  </div>\r\n\r\n  <div *ngIf=\"!dataSource.data\" class=\"no-results\" [style.display]=\"dataSource.renderedData.length == 0 ? '' : 'none'\">\r\n    No results\r\n  </div>\r\n  <mat-paginator #paginator [length]=\"dataSource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\">\r\n  </mat-paginator>\r\n</div>\r\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator, MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { fromEvent } from 'rxjs';\r\nimport { UnsubscribeOnDestroyAdapter } from '../../UnsubscribeOnDestroyAdapter';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { ListColumn } from 'src/app/core/models/ListColumn';\r\n\r\n@Component({\r\n  selector: 'app-custom-table',\r\n  templateUrl: './custom-table.component.html',\r\n  styleUrls: ['./custom-table.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0px' })),\r\n      state('expanded', style({ height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\n\r\nexport class CustomTableComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\r\n\r\n  @Input() showAddButton: boolean = true;\r\n  @Input() dataSource: MatTableDataSource<any>;\r\n  @Input() isTblLoading: boolean;\r\n  @Input() columns: ListColumn[];\r\n\r\n  @Output() addNew: EventEmitter<any> = new EventEmitter();\r\n  @Output() edit: EventEmitter<any> = new EventEmitter();\r\n  @Output() cancel: EventEmitter<any> = new EventEmitter();\r\n  @Output() delete: EventEmitter<any> = new EventEmitter();\r\n  @Output() enable: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild('filter', { static: true }) filter: ElementRef;\r\n\r\n  constructor(public dialog: MatDialog) {\r\n    super();\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.isTblLoading = true;\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\r\n      () => {\r\n        if (!this.dataSource) {\r\n          return;\r\n        }\r\n        this.dataSource.filter = this.filter.nativeElement.value;\r\n      }\r\n    );\r\n  }\r\n\r\n  get displayedColumns() {\r\n    return this.columns.filter(o => o.visible).map(o => o.property);\r\n  }\r\n\r\n  add() {\r\n    this.addNew.emit();\r\n  }\r\n\r\n  editCall(event) {\r\n    this.edit.emit(event);\r\n  }\r\n\r\n  cancelCall(event) {\r\n    this.cancel.emit(event);\r\n  }\r\n\r\n  deleteItem(event) {\r\n    this.delete.emit(event);\r\n  }\r\n\r\n  customPaginator() {\r\n    const customPaginatorIntl = new MatPaginatorIntl();\r\n\r\n    customPaginatorIntl.itemsPerPageLabel = 'Itens por página';\r\n\r\n    return customPaginatorIntl;\r\n  }\r\n}\r\n","import { formatDate } from '@angular/common';\r\nexport class Contacts {\r\n  id: number;\r\n  img: string;\r\n  name: string;\r\n  email: string;\r\n  birthDate: string;\r\n  mobile: string;\r\n  address: string;\r\n  note: string;\r\n\r\n  constructor(contacts) {\r\n    {\r\n      this.id = contacts.id || this.getRandomID();\r\n      this.img = contacts.avatar || 'assets/images/user/usrbig1.jpg';\r\n      this.name = contacts.name || '';\r\n      this.email = contacts.email || '';\r\n      this.birthDate = formatDate(new Date(), 'yyyy-MM-dd', 'en') || '';\r\n      this.address = contacts.address || '';\r\n      this.mobile = contacts.mobile || '';\r\n      this.note = contacts.note || '';\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Contacts } from './contacts.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { UnsubscribeOnDestroyAdapter } from '../../shared/UnsubscribeOnDestroyAdapter';\r\n@Injectable()\r\nexport class ContactsService extends UnsubscribeOnDestroyAdapter {\r\n  private readonly API_URL = 'assets/data/contacts.json';\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Contacts[]> = new BehaviorSubject<Contacts[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  constructor(private httpClient: HttpClient) {\r\n    super();\r\n  }\r\n  get data(): Contacts[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllContactss(): void {\r\n    this.subs.sink = this.httpClient.get<Contacts[]>(this.API_URL).subscribe(\r\n      (data) => {\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(data);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.isTblLoading = false;\r\n        console.log(error.name + ' ' + error.message);\r\n      }\r\n    );\r\n  }\r\n  addContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /*  this.httpClient.post(this.API_URL, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /* this.httpClient.put(this.API_URL + contacts.id, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteContacts(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { ContactsService } from '../../contacts/contacts.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-delete',\r\n  templateUrl: './delete.component.html',\r\n  styleUrls: ['./delete.component.sass']\r\n})\r\nexport class EmployeeDeleteComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EmployeeDeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService\r\n  ) {}\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  confirmDelete(): void {\r\n    this.contactsService.deleteContacts(this.data.id);\r\n  }\r\n}\r\n\r\n","<div class=\"container\">\r\n    <h3 mat-dialog-title>Are you sure?</h3>\r\n    <div mat-dialog-content>\r\n      <ul class=\"clearfix\">\r\n        <li>\r\n          <p><span class=\"font-weight-bold\"> Name: </span>{{data.name}}</p>\r\n        </li>\r\n        <li>\r\n          <p><span class=\"font-weight-bold\"> Email: </span>{{ data.email }}</p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <span class=\"font-weight-bold\">Mobile: </span>{{data.mobile}}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div mat-dialog-actions class=\"mb-1\">\r\n      <button mat-flat-button color=\"warn\" [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">\r\n        Delete\r\n      </button>\r\n      <button mat-flat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n    </div>\r\n  </div>\r\n  ","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Colaboradores</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/dashboard/main\">\r\n                <i class=\"fas fa-home\"></i> Home</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-2\">\r\n              <a href=\"#\"\r\n                 onClick=\"return false;\"\r\n                 [routerLink]=\"['/employee']\">Colaboradores</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Detalhes</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"row\">\r\n                    <div>\r\n                      <div class=\"card border-apply\">\r\n                        <div class=\"m-b-20\">\r\n                          <div class=\"contact-grid\">\r\n                            <div class=\"profile-header bg-dark header-employee\">\r\n                            </div>\r\n                            <img src=\"{{ employeeDisplay.photoUrl }}\"\r\n                                 class=\"user-img imagem-employee\"\r\n                                 alt=\"\">\r\n                            <div class=\"dados-apresentacao\">\r\n                              <p class=\"dados-apresentacao-nome\">\r\n                                {{ employeeDisplay.firstName }}\r\n                              </p>\r\n                              <p class=\"dados-apresentacao-titulo\">\r\n                                {{ employeeDisplay.role }}\r\n                              </p>\r\n                              <p class=\"dados-apresentacao-titulo\">\r\n                                {{ employeeDisplay.email }}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div class=\"card border-apply\">\r\n                        <mat-tab-group>\r\n                          <mat-tab label=\"Atributos\">\r\n                            <div class=\"tab-content\">\r\n                              <div class=\"card conteudo-detalhes-employee\">\r\n\r\n                                <div class=\"row\">\r\n                                  <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\">\r\n                                    <div class=\"card conteudo-detalhes-employee\">\r\n\r\n                                      <mat-form-field>\r\n                                        <mat-label>Attributes</mat-label>\r\n                                        <mat-select [formControl]=\"attributeCategories\"\r\n                                                    (selectionChange)=\"filterSelect($event)\"\r\n                                                    multiple>\r\n                                          <mat-option *ngFor=\"let attribute of listaEmployeeAttributeDiff\"\r\n                                                      [value]=\"attribute\">{{ attribute }}\r\n                                          </mat-option>\r\n                                        </mat-select>\r\n                                      </mat-form-field>\r\n\r\n                                    </div>\r\n                                  </div>\r\n                                  <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\r\n                                    <div class=\"card add conteudo-detalhes-employee\">\r\n\r\n                                      <button mat-mini-fab\r\n                                              color=\"success\"\r\n                                              class=\"add\"\r\n                                              (click)=\"saveNewScore(modalNewScore)\">\r\n                                        <mat-icon class=\"col-white\">add\r\n                                        </mat-icon>\r\n\r\n                                      </button>\r\n\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n\r\n                                <div class=\"row\">\r\n                                  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                                    <div class=\"card conteudo-detalhes-employee\">\r\n\r\n                                      <ngx-datatable #table2\r\n                                                     class=\"material\"\r\n                                                     [rows]=\"tb2data\"\r\n                                                     [columns]=\"tb2columns\"\r\n                                                     [sortType]=\"'multi'\"\r\n                                                     [columnMode]=\"'force'\"\r\n                                                     [headerHeight]=\"50\"\r\n                                                     [footerHeight]=\"50\"\r\n                                                     [rowHeight]=\"'auto'\"\r\n                                                     [limit]=\"10\">\r\n                                      </ngx-datatable>\r\n\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n\r\n                              </div>\r\n                            </div>\r\n                          </mat-tab>\r\n                          <mat-tab label=\"Conteúdo 2\">\r\n                            <div class=\"tab-content\">\r\n                              <div class=\"card conteudo-detalhes-employee\">\r\n                                <div class=\"body\">\r\n                                  <div class=\"row\">\r\n                                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">\r\n                                      <h5>Gráfico 1</h5>\r\n                                      <div echarts\r\n                                           [options]=\"pieChart\"\r\n                                           class=\"echart-height\"></div>\r\n                                    </div>\r\n                                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">\r\n                                      <h5>Gráfico 2</h5>\r\n                                      <div echarts\r\n                                           [options]=\"pieChart\"\r\n                                           class=\"echart-height\"></div>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n\r\n                              </div>\r\n\r\n\r\n                            </div>\r\n                          </mat-tab>\r\n                        </mat-tab-group>\r\n                      </div>\r\n\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<ng-template #modalNewScore>\r\n  <div mat-dialog-title>\r\n    <h5>New Score</h5>\r\n  </div>\r\n\r\n  <div mat-dialog-content>\r\n    <form class=\"\"\r\n          [formGroup]=\"newScoreForm\"\r\n          id=\"newScoreForm\"\r\n          (ngSubmit)=\"onSubmit()\">\r\n\r\n      <div class=\"form-group\">\r\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n          <mat-form-field appearance=\"fill\"\r\n                          class=\"width-filter\">\r\n            <mat-label>Categories</mat-label>\r\n            <mat-select formControlName=\"controlNewScoreCategories\"\r\n                        (selectionChange)=\"filterSelectedCategoryNewScore($event)\"\r\n                        required>\r\n              <mat-option *ngFor=\"let attributeCategory of newScoreAttributeCategories\"\r\n                          [value]=\"attributeCategory\">\r\n                {{ attributeCategory.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n          <mat-form-field appearance=\"fill\"\r\n                          class=\"width-filter\">\r\n            <mat-label>Types</mat-label>\r\n            <mat-select formControlName=\"controlNewScoreTypes\"\r\n                        (selectionChange)=\"filterSelectedTypeNewScore($event)\"\r\n                        required>\r\n              <mat-option *ngFor=\"let attributeType of newScoreAttributeTypes\"\r\n                          [value]=\"attributeType\">\r\n                {{ attributeType.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"form-group\">\r\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n          <mat-form-field appearance=\"fill\"\r\n                          class=\"width-filter\">\r\n            <mat-label>Attributes</mat-label>\r\n            <mat-select formControlName=\"controlNewScoreAttributes\"\r\n                        (selectionChange)=\"filterSelectedAttributeNewScore($event)\"\r\n                        required>\r\n              <mat-option *ngFor=\"let attribute of newScoreAttributes\"\r\n                          [value]=\"attribute\">\r\n                {{ attribute.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n          <mat-form-field appearance=\"fill\"\r\n                          class=\"width-filter\">\r\n            <mat-label>Score</mat-label>\r\n            <mat-select formControlName=\"controlNewScoreValue\"\r\n                        required>\r\n              <mat-option *ngFor=\"let value of newScoreValues\"\r\n                          [value]=\"value\">\r\n                {{ value.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- <div class=\"form-group\">\r\n        <div class=\"col-md-12\">\r\n          <mat-form-field appearance=\"fill\"\r\n                          class=\"width-filter\">\r\n            <mat-label>Score</mat-label>\r\n            <input type=\"number\"\r\n                   matInput\r\n                   min=\"1\"\r\n                   max=\"10\"\r\n                   name=\"score\"\r\n                   id=\"score\"\r\n                   formControlName=\"newScoreValue\"\r\n                   required>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n -->\r\n    </form>\r\n  </div>\r\n\r\n  <div mat-dialog-actions\r\n       class=\"position-actions\">\r\n    <button mat-raised-button\r\n            class=\"mat-button-cancel\"\r\n            [mat-dialog-close]=\"false\">Cancel</button>\r\n\r\n    <button mat-raised-button\r\n            class=\"mat-button-confirm\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            form=\"newScoreForm\"\r\n            cdkFocusInitial>Save</button>\r\n  </div>\r\n\r\n</ng-template>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { UnsubscribeOnDestroyAdapter } from '../../../shared/UnsubscribeOnDestroyAdapter';\r\nimport { ContactsService } from '../../contacts/contacts.service';\r\nimport { EmployeeService } from 'src/app/core/service/employee.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { EChartOption } from 'echarts';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\r\nimport { EmployeeAttributeService } from 'src/app/core/service/employee.attribute.service';\r\nimport { AttributeService } from 'src/app/core/service/attribute.service';\r\nimport { EmployeeAttribute } from 'src/app/core/models/employee-attribute.model';\r\nimport { AttributeTypeService } from 'src/app/core/service/attibute.type.service';\r\nimport { AttributeCategoryService } from 'src/app/core/service/attribute.category.service';\r\nimport { TestComponentRenderer } from '@angular/core/testing';\r\nimport { Attribute } from 'src/app/core/models/attribute.model';\r\nimport { Employee } from 'src/app/core/models/employee.model';\r\nimport { EmployeeRoleService } from 'src/app/core/service/employee.role.service';\r\nimport { EmployeeRole } from 'src/app/core/models/employee-role.model';\r\nimport { NotifierService } from 'angular-notifier';\r\n\r\n@Component({\r\n    selector: 'app-employee-detalhes',\r\n    templateUrl: './employee-detalhes.component.html',\r\n    styleUrls: ['./employee-detalhes.component.scss']\r\n})\r\n\r\nexport class EmployeeDetalhesComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\r\n    @ViewChild(DatatableComponent, { static: false }) table2: DatatableComponent;\r\n\r\n    private readonly notifier: NotifierService;\r\n\r\n    /* Pie Chart */\r\n    pieChart: EChartOption = {\r\n        tooltip: {\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n        },\r\n        legend: {\r\n            data: ['Data 1', 'Data 2', 'Data 3', 'Data 4', 'Data 5'],\r\n            textStyle: {\r\n                color: '#9aa0ac',\r\n                padding: [0, 5, 0, 5]\r\n            }\r\n        },\r\n\r\n        series: [\r\n            {\r\n                name: 'Chart Data',\r\n                type: 'pie',\r\n                radius: '55%',\r\n                center: ['50%', '48%'],\r\n                data: [\r\n                    {\r\n                        value: 335,\r\n                        name: 'Data 1'\r\n                    },\r\n                    {\r\n                        value: 310,\r\n                        name: 'Data 2'\r\n                    },\r\n                    {\r\n                        value: 234,\r\n                        name: 'Data 3'\r\n                    },\r\n                    {\r\n                        value: 135,\r\n                        name: 'Data 4'\r\n                    },\r\n                    {\r\n                        value: 548,\r\n                        name: 'Data 5'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        color: ['#575B7A', '#DE725C', '#DFC126', '#72BE81', '#50A5D8']\r\n    };\r\n    constructor(\r\n        public httpClient: HttpClient,\r\n        public dialog: MatDialog,\r\n        public contactsService: ContactsService,\r\n        public employeeService: EmployeeService,\r\n        public employeeRoleService: EmployeeRoleService,\r\n        public employeeAttributeService: EmployeeAttributeService,\r\n        public attributeService: AttributeService,\r\n        public attributeTypeService: AttributeTypeService,\r\n        public attributeCategoryService: AttributeCategoryService,\r\n        private snackBar: MatSnackBar,\r\n        private route: ActivatedRoute,\r\n        private notifierService: NotifierService) {\r\n        super();\r\n        this.notifier = notifierService;\r\n    }\r\n    employeelId: string;\r\n\r\n    newScoreForm: FormGroup;\r\n    controlNewScoreCategories: FormControl;\r\n    controlNewScoreTypes: FormControl;\r\n    controlNewScoreAttributes: FormControl;\r\n    controlNewScoreValue: FormControl;\r\n\r\n    newScoreAttributeCategories: any[];\r\n    newScoreAttributeTypes: any[];\r\n    newScoreAttributes: any[];\r\n    newScoreValues: any[];\r\n\r\n    employeeDisplay: any = {};\r\n    employee: Employee = new Employee();\r\n    employeeRoles: EmployeeRole[];\r\n\r\n    listaEmployeeAttribute: EmployeeAttribute[];\r\n    attributes: Attribute[];\r\n    listaEmployeeAttributeDiff: string[] = [];\r\n\r\n    tableContent: any[] = [];\r\n\r\n    attributeCategories = new FormControl();\r\n    // attributeCategoryList: any[] = [];\r\n\r\n    // attributeTypes = new FormControl();\r\n    // attributeTypeList: any[] = [];\r\n\r\n    filtersTypes: any[] = [];\r\n    filtersCategories: any[] = [];\r\n\r\n    tb2columns = [\r\n        { prop: 'attributeName', name: 'Attibute' },\r\n        { prop: 'score', name: 'Score' },\r\n        { prop: 'createdAt', name: 'Evaluation Date' }\r\n    ];\r\n    tb2data = [];\r\n    tb2filteredData = [];\r\n\r\n    ngOnInit() {\r\n        this.controlNewScoreCategories = new FormControl();\r\n        this.controlNewScoreTypes = new FormControl();\r\n        this.controlNewScoreAttributes = new FormControl();\r\n        this.controlNewScoreValue = new FormControl();\r\n\r\n        this.employeelId = this.route.snapshot.paramMap.get('id');\r\n\r\n        this.tb2fetch((data) => {\r\n            this.tb2data = data;\r\n            this.tb2filteredData = data;\r\n        });\r\n        this.getEmployeeRoles(this.employeelId);\r\n\r\n\r\n        this.getEmployeeAttribute(this.employeelId);\r\n        // this.getattributeTypeList();\r\n        // this.getattributeCategoryList();\r\n    }\r\n\r\n    getEmployeeData(id: string) {\r\n        this.employeeService.getById(id).subscribe(response => {\r\n            this.employee = response;\r\n\r\n            let employeeRole = \"\";\r\n            this.employeeRoles.forEach(element => {\r\n                if (this.employee.employeeRoleId === element.id) {\r\n                    employeeRole = element.description;\r\n                }\r\n            });\r\n\r\n            this.employeeDisplay = {\r\n                firstName: this.employee.firstName,\r\n                email: this.employee.email,\r\n                photoUrl: this.employee.photoUrl,\r\n                role: employeeRole\r\n            };\r\n        });\r\n    }\r\n\r\n    getEmployeeRoles(id: string) {\r\n        this.employeeRoleService.getAll().subscribe(response => {\r\n            this.getEmployeeData(id);\r\n            this.employeeRoles = response;\r\n        });\r\n    }\r\n\r\n    getEmployeeAttribute(id: string) {\r\n        this.employeeAttributeService.getByEmployeeId(id).subscribe(response => {\r\n            this.listaEmployeeAttribute = response;\r\n            this.getAllAttributes();\r\n        });\r\n    }\r\n\r\n    filterSelect(event) {\r\n        if (event.value.length > 0) {\r\n            const tableContentFiltered = [];\r\n\r\n            this.tableContent.forEach(element => {\r\n                if (event.value.includes(element.attributeName)) {\r\n                    tableContentFiltered.push(element);\r\n                }\r\n            });\r\n\r\n            this.tb2data = tableContentFiltered;\r\n        }\r\n        else {\r\n            this.populateTb2();\r\n        }\r\n    }\r\n\r\n    saveNewScore(modalNewScore) {\r\n        this.newScoreForm = new FormGroup({\r\n            controlNewScoreCategories: new FormControl(),\r\n            controlNewScoreTypes: new FormControl(),\r\n            controlNewScoreAttributes: new FormControl(),\r\n            controlNewScoreValue: new FormControl()\r\n        });\r\n\r\n        this.attributeCategoryService.getAll().subscribe(response => {\r\n            this.newScoreAttributeCategories = response;\r\n        });\r\n\r\n        const dialogRef = this.dialog.open(modalNewScore, {\r\n            width: '880px',\r\n        });\r\n    }\r\n\r\n    filterSelectedCategoryNewScore(event) {\r\n        this.newScoreAttributeTypes = [];\r\n        this.newScoreAttributes = [];\r\n        this.newScoreValues = [];\r\n        this.attributeTypeService.getByAttributeCategoryId(event.value.id).subscribe(response => {\r\n            this.newScoreAttributeTypes = response;\r\n        });\r\n    }\r\n\r\n    filterSelectedTypeNewScore(event) {\r\n        this.newScoreAttributes = [];\r\n        this.newScoreValues = [];\r\n        this.attributeService.getByAttributeTypeId(event.value.id).subscribe(response => {\r\n            this.newScoreAttributes = response;\r\n        });\r\n    }\r\n\r\n\r\n    filterSelectedAttributeNewScore(event) {\r\n        const scoreHelper = event.value.scoreHelper.split(\";\");\r\n        const allowedScores = event.value.allowedScores.split(\";\");\r\n\r\n        const newScoreValuesMapped = [];\r\n\r\n        allowedScores.forEach((allowedScoresValue, index) => {\r\n            const scoreHelperValue = scoreHelper[index];\r\n\r\n            newScoreValuesMapped.push({\r\n                score: allowedScoresValue,\r\n                description: scoreHelperValue\r\n            });\r\n        });\r\n\r\n        this.newScoreValues = newScoreValuesMapped;\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.newScoreForm.valid && this.newScoreForm.value != null) {\r\n            const payload = {\r\n                employeeId: this.employeelId,\r\n                attributeId: this.newScoreForm.value.controlNewScoreAttributes.id,\r\n                score: parseInt(this.newScoreForm.value.controlNewScoreValue.score, 10),\r\n            };\r\n\r\n            this.employeeAttributeService.postSaveEmployeeAttribute(payload).subscribe(response => {\r\n                this.notifier.notify('success', 'Score successfully saved!');\r\n                this.populateTb2();\r\n            },\r\n            (err) => {\r\n              this.notifier.notify('error', `There was an error while saving the new score.`);\r\n            });\r\n\r\n            this.dialog.closeAll();\r\n        }\r\n    }\r\n\r\n    // getattributeTypeList() {\r\n    //     this.attributeTypeService.getAll().subscribe(\r\n    //         response => {\r\n    //             this.attributeTypeList = response;\r\n    //             // console.log(response);\r\n    //         },\r\n    //         error => {\r\n    //             console.log(error);\r\n    //         }\r\n    //     );\r\n    // }\r\n\r\n    // getattributeCategoryList() {\r\n    //     this.attributeCategoryService.getAll().subscribe(\r\n    //         response => {\r\n    //             this.attributeCategoryList = response;\r\n    //             // console.log(response);\r\n    //         },\r\n    //         error => {\r\n    //             console.log(error);\r\n    //         }\r\n    //     );\r\n    // }\r\n\r\n    getAllAttributes() {\r\n        this.attributeService.getAll().subscribe(\r\n            response => {\r\n                this.attributes = response;\r\n                this.populateTb2();\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    refresh() {\r\n    }\r\n\r\n    populateTb2() {\r\n        this.tableContent = [];\r\n        this.listaEmployeeAttributeDiff = [];\r\n\r\n        this.listaEmployeeAttribute.forEach(element => {\r\n            this.attributes.forEach(attribute => {\r\n                if (attribute.id === element.attributeId) {\r\n                    this.listaEmployeeAttributeDiff.push(attribute.description);\r\n                    this.tableContent.push({\r\n                        attributeId: element.attributeId,\r\n                        attributeName: attribute.description,\r\n                        createdAt: element.createdAt,\r\n                        employeeId: element.employeeId,\r\n                        id: element.id,\r\n                        score: element.score\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        this.listaEmployeeAttributeDiff = this.listaEmployeeAttributeDiff.filter((item, pos) => {\r\n            return this.listaEmployeeAttributeDiff.indexOf(item) === pos;\r\n        });\r\n\r\n        this.tb2data = this.tableContent;\r\n    }\r\n\r\n    tb2fetch(cb) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', 'assets/data/ngx-data.json');\r\n        req.onload = () => {\r\n            const data = JSON.parse(req.response);\r\n            cb(data);\r\n        };\r\n        req.send();\r\n    }\r\n\r\n    tb2filterDatatable(event) {\r\n        // get the value of the key pressed and make it lowercase\r\n        const val = event.target.value.toLowerCase();\r\n        // get the amount of columns in the table\r\n        const colsAmt = this.tb2columns.length;\r\n        // get the key names of each column in the dataset\r\n        const keys = Object.keys(this.tb2filteredData[0]);\r\n        // assign filtered matches to the active datatable\r\n        // this.tb2data = this.tb2filteredData.filter(function (item) {\r\n        //     // iterate through each row's column data\r\n        //     for (let i = 0; i < colsAmt; i++) {\r\n        //         // check for a match\r\n        //         if (\r\n        //             item[keys[i]].toString().toLowerCase().indexOf(val) !== -1 ||\r\n        //             !val\r\n        //         ) {\r\n        //             // found match, return true to add to result set\r\n        //             return true;\r\n        //         }\r\n        //     }\r\n        // });\r\n\r\n        // whenever the filter changes, always go back to the first page\r\n        this.table2.offset = 0;\r\n    }\r\n\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { EmployeeDetalhesComponent } from \"./employee-detalhes/employee-detalhes.component\";\r\nimport { EmployeeComponent } from \"./employee.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeeComponent\r\n  },\r\n  {\r\n    path: 'detalhes/:id',\r\n    component: EmployeeDetalhesComponent\r\n  }\r\n];\r\n  \r\n  @NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class EmployeeRoutingModule {}\r\n  ","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Colaboradores</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/dashboard/main\">\r\n                <i class=\"fas fa-home\"></i> Home</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Colaboradores</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"table-responsive\">\r\n                    <div class=\"materialTableHeader\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-8\">\r\n                          <ul class=\"header-buttons-left ml-0\">\r\n                            <li class=\"dropdown\">\r\n                              <h2>\r\n                                <strong>Colaboradores</strong>\r\n                              </h2>\r\n                            </li>\r\n                            <li class=\"dropdown m-l-20\">\r\n                              <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\r\n                              <input placeholder=\"Search\"\r\n                                     type=\"text\"\r\n                                     #filter\r\n                                     class=\"browser-default search-field\"\r\n                                     aria-label=\"Search box\">\r\n                            </li>\r\n                            <!-- <li>\r\n                              <div class=\"icon-button-demo m-l-10\"\r\n                                   [hidden]=!selection.hasValue()>\r\n                                <button mat-mini-fab\r\n                                        color=\"warn\"\r\n                                        (click)=\"removeSelectedRows()\">\r\n                                  <mat-icon class=\"col-white\">delete\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li> -->\r\n                          </ul>\r\n                        </div>\r\n                        <div class=\"col-4\">\r\n                          <ul class=\"header-buttons\">\r\n                            <!-- <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab\r\n                                        color=\"primary\"\r\n                                        (click)=\"addNew()\">\r\n                                  <mat-icon class=\"col-white\">add</mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li> -->\r\n                            <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab\r\n                                        color=\"primary\"\r\n                                        (click)=\"refresh()\">\r\n                                  <mat-icon class=\"col-white\">refresh\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <mat-table #table\r\n                               [dataSource]=\"dataSource\"\r\n                               matSort\r\n                               class=\"mat-cell\">\r\n                      <!-- Checkbox Column -->\r\n                      <ng-container matColumnDef=\"select\">\r\n                        <mat-header-cell *matHeaderCellDef\r\n                                         [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                                        [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                                        [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"\r\n                                  [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                                        (change)=\"$event ? selection.toggle(row) : null\"\r\n                                        [checked]=\"selection.isSelected(row)\"\r\n                                        [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- ID Column -->\r\n                      <ng-container matColumnDef=\"id\">\r\n                        <mat-header-cell *matHeaderCellDef\r\n                                         mat-sort-header>Id\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.id}}</mat-cell>\r\n                      </ng-container>\r\n                      <!-- <ng-container matColumnDef=\"img\">\r\n                        <mat-header-cell mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\"> Image\r\n                        </mat-header-cell>\r\n                        <mat-cell mat-cell *matCellDef=\"let row\" class=\"table-img tbl-col-width-per-6\"> <img\r\n                            [src]=\"row.img\" />\r\n                        </mat-cell>\r\n                      </ng-container> -->\r\n                      <ng-container matColumnDef=\"firstName\">\r\n                        <mat-header-cell *matHeaderCellDef\r\n                                         mat-sort-header>Nome\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.firstName}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef\r\n                                         mat-sort-header>Email\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.email}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- <ng-container matColumnDef=\"mobile\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Mobile\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.mobile}}\r\n                        </mat-cell>\r\n                      </ng-container> -->\r\n                      <!-- <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.email}}\r\n                        </mat-cell>\r\n                      </ng-container> -->\r\n                      <!-- <ng-container matColumnDef=\"birthDate\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Birth Date\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">\r\n                          {{row.birthDate | date: 'MM/dd/yyyy'}}</mat-cell>\r\n                      </ng-container> -->\r\n                      <!-- <ng-container matColumnDef=\"address\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Address\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\" class=\"column-nowrap\"> {{row.address}}\r\n                        </mat-cell>\r\n                      </ng-container> -->\r\n                      <!-- <ng-container matColumnDef=\"note\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Note\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.note}}\r\n                        </mat-cell>\r\n                      </ng-container> -->\r\n                      <!-- actions -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                        <mat-header-cell class=\"psl-3 tbl-col-width-per-10\"\r\n                                         *matHeaderCellDef>Informações\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row; let i=index;\"\r\n                                  class=\"psl-3 tbl-col-width-per-10\">\r\n                          <button mat-mini-fab\r\n                                  color=\"primary\" (click)=\"onClickRoute(row)\">\r\n                            <mat-icon class=\"col-white\">info_outline\r\n                            </mat-icon>\r\n                          </button>\r\n\r\n                        </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-header-row *matHeaderRowDef=\"displayedColumns\">\r\n                      </mat-header-row>\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"\r\n                               [style.cursor]=\"'pointer'\"\r\n                               matRipple>\r\n                      </mat-row>\r\n                    </mat-table>\r\n                    <!-- Loading spinner -->\r\n                    <!-- <div *ngIf=\"exampleDatabase.isTblLoading\" class=\"tbl-spinner\">\r\n                      <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\r\n                      </mat-progress-spinner>\r\n                    </div> -->\r\n                    <div class=\"empty\"\r\n                         [style.display]=\"dataSource.data.length == 0 ? '' : 'none'\">\r\n                      Não existem dados para serem exibidos\r\n                    </div>\r\n                    <mat-paginator #paginator\r\n                                   [length]=\"dataSource.data.length\"\r\n                                   [pageIndex]=\"0\"\r\n                                   [pageSize]=\"10\"\r\n                                   [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n                    </mat-paginator>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { UnsubscribeOnDestroyAdapter } from '../../shared/UnsubscribeOnDestroyAdapter';\r\nimport { Contacts } from '../contacts/contacts.model';\r\nimport { EmployeeFormComponent } from './form/form.component';\r\nimport { EmployeeDeleteComponent } from './delete/delete.component';\r\nimport { ContactsService } from '../contacts/contacts.service';\r\nimport { Employee } from 'src/app/core/models/employee.model';\r\nimport { EmployeeService } from 'src/app/core/service/employee.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-employee',\r\n  templateUrl: './employee.component.html',\r\n  styleUrls: ['./employee.component.scss']\r\n})\r\n\r\nexport class EmployeeComponent\r\n  extends UnsubscribeOnDestroyAdapter\r\n  implements OnInit\r\n{\r\n  filterToggle = false;\r\n  displayedColumns = [\r\n    'select',\r\n    'id',\r\n    'firstName',\r\n    'email',\r\n    'actions'\r\n  ];\r\n  // exampleDatabase: ContactsService | null;\r\n  // dataSource: ExampleDataSource | null;\r\n  dataSource = new MatTableDataSource<any>();\r\n  selection = new SelectionModel<Employee>(true, []);\r\n  id: number;\r\n  //contacts: Contacts | null;\r\n  employees: Employee[] = [];\r\n  constructor(\r\n    public httpClient: HttpClient,\r\n    public dialog: MatDialog,\r\n    public contactsService: ContactsService,\r\n    public employeeService: EmployeeService,\r\n    private snackBar: MatSnackBar,\r\n    private route: Router\r\n  ) {\r\n    super();\r\n  }\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild('filter', { static: true }) filter: ElementRef;\r\n  @ViewChild(MatMenuTrigger)\r\n  contextMenu: MatMenuTrigger;\r\n  contextMenuPosition = { x: '0px', y: '0px' };\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n  refresh() {\r\n    this.loadData();\r\n  }\r\n\r\n  getEmployers() {\r\n    this.dataSource.data = [];\r\n\r\n    this.employeeService.getAll().subscribe(colaboradores => {\r\n      this.employees = colaboradores;\r\n      this.dataSource.data = this.employees;\r\n      // console.log(\"dataSource.data: \", this.dataSource.data);\r\n      // console.log(\"dataSource: \", this.dataSource);\r\n    });\r\n\r\n  }\r\n\r\n  onClickRoute(event){\r\n    // console.log(\"event: \", event)\r\n    this.route.navigate([`/employee/detalhes/` + event.id]);\r\n  }\r\n\r\n  addNew() {\r\n    // let tempDirection;\r\n    // if (localStorage.getItem('isRtl') === 'true') {\r\n    //   tempDirection = 'rtl';\r\n    // } else {\r\n    //   tempDirection = 'ltr';\r\n    // }\r\n    // const dialogRef = this.dialog.open(EmployeeFormComponent, {\r\n    //   data: {\r\n    //     contacts: this.contacts,\r\n    //     action: 'add'\r\n    //   },\r\n    //   direction: tempDirection\r\n    // });\r\n    // this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n    //   if (result === 1) {\r\n    //     // After dialog is closed we're doing frontend updates\r\n    //     // For add we're just pushing a new row inside DataServicex\r\n    //     this.exampleDatabase.dataChange.value.unshift(\r\n    //       this.contactsService.getDialogData()\r\n    //     );\r\n    //     this.refreshTable();\r\n    //     this.showNotification(\r\n    //       'snackbar-success',\r\n    //       'Add Record Successfully...!!!',\r\n    //       'bottom',\r\n    //       'center'\r\n    //     );\r\n    //   }\r\n    // });\r\n  }\r\n  detailsCall(row) {\r\n    let tempDirection;\r\n    if (localStorage.getItem('isRtl') === 'true') {\r\n      tempDirection = 'rtl';\r\n    } else {\r\n      tempDirection = 'ltr';\r\n    }\r\n    this.dialog.open(EmployeeFormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: 'details'\r\n      },\r\n      direction: tempDirection,\r\n      height: '70%',\r\n      width: '35%'\r\n    });\r\n  }\r\n  toggleStar(row) {\r\n    // console.log(row);\r\n  }\r\n  editCall(row) {\r\n    // this.id = row.id;\r\n    // let tempDirection;\r\n    // if (localStorage.getItem('isRtl') === 'true') {\r\n    //   tempDirection = 'rtl';\r\n    // } else {\r\n    //   tempDirection = 'ltr';\r\n    // }\r\n    // const dialogRef = this.dialog.open(EmployeeFormComponent, {\r\n    //   data: {\r\n    //     contacts: row,\r\n    //     action: 'edit'\r\n    //   },\r\n    //   direction: tempDirection\r\n    // });\r\n    // this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n    //   if (result === 1) {\r\n    //     // When using an edit things are little different, firstly we find record inside DataService by id\r\n    //     const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n    //       (x) => x.id === this.id\r\n    //     );\r\n    //     // Then you update that record using data from dialogData (values you enetered)\r\n    //     this.exampleDatabase.dataChange.value[foundIndex] =\r\n    //       this.contactsService.getDialogData();\r\n    //     // And lastly refresh table\r\n    //     this.refreshTable();\r\n    //     this.showNotification(\r\n    //       'black',\r\n    //       'Edit Record Successfully...!!!',\r\n    //       'bottom',\r\n    //       'center'\r\n    //     );\r\n    //   }\r\n    // });\r\n  }\r\n  deleteItem(row) {\r\n    // this.id = row.id;\r\n    // let tempDirection;\r\n    // if (localStorage.getItem('isRtl') === 'true') {\r\n    //   tempDirection = 'rtl';\r\n    // } else {\r\n    //   tempDirection = 'ltr';\r\n    // }\r\n    // const dialogRef = this.dialog.open(EmployeeDeleteComponent, {\r\n    //   data: row,\r\n    //   direction: tempDirection\r\n    // });\r\n    // this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n    //   if (result === 1) {\r\n    //     const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n    //       (x) => x.id === this.id\r\n    //     );\r\n    //     // for delete we use splice in order to remove single object from DataService\r\n    //     this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\r\n    //     this.refreshTable();\r\n    //     this.showNotification(\r\n    //       'snackbar-danger',\r\n    //       'Delete Record Successfully...!!!',\r\n    //       'bottom',\r\n    //       'center'\r\n    //     );\r\n    //   }\r\n    // });\r\n  }\r\n  private refreshTable() {\r\n    this.paginator._changePageSize(this.paginator.pageSize);\r\n  }\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.dataSource.data.forEach((row) =>\r\n          this.selection.select(row)\r\n        );\r\n  }\r\n  \r\n  removeSelectedRows() {\r\n    // const totalSelect = this.selection.selected.length;\r\n    // this.selection.selected.forEach((item) => {\r\n    //   const index: number = this.dataSource.data.findIndex(\r\n    //     (d) => d === item\r\n    //   );\r\n    //   // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\r\n    //   this.exampleDatabase.dataChange.value.splice(index, 1);\r\n    //   this.refreshTable();\r\n    //   this.selection = new SelectionModel<Employee>(true, []);\r\n    // });\r\n    // this.showNotification(\r\n    //   'snackbar-danger',\r\n    //   totalSelect + ' Record Delete Successfully...!!!',\r\n    //   'bottom',\r\n    //   'center'\r\n    // );\r\n  }\r\n  public loadData() {\r\n    this.getEmployers();\r\n\r\n    // console.log(\"datasource: \", this.dataSource);\r\n    this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup')\r\n      // .debounceTime(150)\r\n      // .distinctUntilChanged()\r\n      .subscribe(() => {\r\n        if (!this.dataSource) {\r\n          return;\r\n        }\r\n        this.dataSource.filter = this.filter.nativeElement.value;\r\n      });\r\n  }\r\n  showNotification(colorName, text, placementFrom, placementAlign) {\r\n    this.snackBar.open(text, '', {\r\n      duration: 2000,\r\n      verticalPosition: placementFrom,\r\n      horizontalPosition: placementAlign,\r\n      panelClass: colorName\r\n    });\r\n  }\r\n}\r\n\r\n// export class ExampleDataSource extends DataSource<Contacts> {\r\n//   filterChange = new BehaviorSubject('');\r\n//   get filter(): string {\r\n//     return this.filterChange.value;\r\n//   }\r\n//   set filter(filter: string) {\r\n//     this.filterChange.next(filter);\r\n//   }\r\n//   filteredData: Employee[] = [];\r\n//   renderedData: Employee[] = [];\r\n//   constructor(\r\n//     public exampleDatabase: EmployeeService,\r\n//     public paginator: MatPaginator,\r\n//     public _sort: MatSort\r\n//   ) {\r\n//     super();\r\n//     // Reset to the first page when the user changes the filter.\r\n//     this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n//   }\r\n//   /** Connect function called by the table to retrieve one stream containing the data to render. */\r\n//   connect(): Observable<Employee[]> {\r\n//     // Listen for any changes in the base data, sorting, filtering, or pagination\r\n//     const displayDataChanges = [\r\n//       //this.exampleDatabase.dataChange,\r\n//       this._sort.sortChange,\r\n//       this.filterChange,\r\n//       this.paginator.page\r\n//     ];\r\n//     this.exampleDatabase.getAll();\r\n//     return merge(...displayDataChanges).pipe(\r\n//       map(() => {\r\n//         // Filter data\r\n//         this.filteredData = this.exampleDatabase.getAll\r\n//           .slice()\r\n//           .filter((contacts: Contacts) => {\r\n//             const searchStr = (\r\n//               contacts.name +\r\n//               contacts.birthDate +\r\n//               contacts.email +\r\n//               contacts.mobile +\r\n//               contacts.address\r\n//             ).toLowerCase();\r\n//             return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n//           });\r\n//         // Sort filtered data\r\n//         const sortedData = this.sortData(this.filteredData.slice());\r\n//         // Grab the page's slice of the filtered sorted data.\r\n//         const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n//         this.renderedData = sortedData.splice(\r\n//           startIndex,\r\n//           this.paginator.pageSize\r\n//         );\r\n//         return this.renderedData;\r\n//       })\r\n//     );\r\n//   }\r\n//   disconnect() {}\r\n//   /** Returns a sorted copy of the database data. */\r\n//   sortData(data: Contacts[]): Contacts[] {\r\n//     if (!this._sort.active || this._sort.direction === '') {\r\n//       return data;\r\n//     }\r\n//     return data.sort((a, b) => {\r\n//       let propertyA: number | string = '';\r\n//       let propertyB: number | string = '';\r\n//       switch (this._sort.active) {\r\n//         case 'id':\r\n//           [propertyA, propertyB] = [a.id, b.id];\r\n//           break;\r\n//         case 'name':\r\n//           [propertyA, propertyB] = [a.name, b.name];\r\n//           break;\r\n//         case 'email':\r\n//           [propertyA, propertyB] = [a.email, b.email];\r\n//           break;\r\n//         case 'birthDate':\r\n//           [propertyA, propertyB] = [a.birthDate, b.birthDate];\r\n//           break;\r\n//         case 'address':\r\n//           [propertyA, propertyB] = [a.address, b.address];\r\n//           break;\r\n//       }\r\n//       const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\r\n//       const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\r\n//       return (\r\n//         (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1)\r\n//       );\r\n//     });\r\n//   }\r\n// }","import { NgModule } from \"@angular/core\";\r\nimport { OwlDateTimeIntl } from \"ng-pick-datetime\";\r\nimport { ComponentModule } from \"src/app/shared/components/component.module\";\r\nimport { SnackbarComponent } from \"../ui/snackbar/snackbar.component\";\r\nimport { EmployeeRoutingModule } from \"./employee-routing.module\";\r\nimport { EmployeeComponent } from \"./employee.component\";\r\nimport { EmployeeFormComponent } from './form/form.component';\r\nimport { EmployeeDeleteComponent } from './delete/delete.component';\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MaterialFileInputModule } from \"ngx-material-file-input\";\r\nimport { AdvanceTableRoutingModule } from \"../advance-table/advance-table-routing.module\";\r\nimport { ContactsService } from \"../contacts/contacts.service\";\r\nimport { EmployeeDetalhesComponent } from \"./employee-detalhes/employee-detalhes.component\";\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\nimport { NgxEchartsModule } from \"ngx-echarts\";\r\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    EmployeeRoutingModule,\r\n    ComponentModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AdvanceTableRoutingModule,\r\n    MatTabsModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatSortModule,\r\n    MatToolbarModule,\r\n    MaterialFileInputModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule,\r\n    NgxDatatableModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts: () => import('echarts')\r\n    }),\r\n\r\n  ],\r\n  declarations: [\r\n    EmployeeComponent,\r\n    EmployeeFormComponent,\r\n    EmployeeDeleteComponent,\r\n    EmployeeDetalhesComponent\r\n  ],\r\n  providers: [\r\n    SnackbarComponent,\r\n    { provide: OwlDateTimeIntl },\r\n    ContactsService\r\n  ],\r\n})\r\nexport class EmployeeModule { }\r\n","<div class=\"addContainer\">\r\n    <div *ngIf=\"!isDetails\" class=\"contact-form\">\r\n      <div class=\"modalHeader\">\r\n        <div class=\"editRowModal\">\r\n          <div class=\"modalHeader clearfix\">\r\n            <img [src]='contacts.img' alt=\"avatar\">\r\n            <div class=\"modal-about\">\r\n              <div class=\"font-weight-bold p-t-5 font-17\">\r\n                {{dialogTitle}}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div mat-dialog-content>\r\n        <form class=\"register-form m-4\" [formGroup]=\"contactsForm\" (ngSubmit)=\"submit\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput formControlName=\"name\" required>\r\n                <i class=\"material-icons-two-tone color-icon\" matSuffix>face</i>\r\n                <mat-error *ngIf=\"contactsForm.get('name').hasError('required')\">\r\n                  Name is required\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Email</mat-label>\r\n                <input matInput formControlName=\"email\" required>\r\n                <i class=\"material-icons-two-tone color-icon\" matSuffix>email</i>\r\n                <mat-error *ngIf=\"contactsForm.get('email').hasError('required') || contactsForm.get('email').touched\">\r\n                  Please enter a valid email address\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Mobile</mat-label>\r\n                <input matInput formControlName=\"mobile\" type=\"number\">\r\n                <i class=\"material-icons-two-tone color-icon\" matSuffix>smartphone</i>\r\n                <mat-error *ngIf=\"contactsForm.get('mobile').hasError('required')\">\r\n                  Mobile is required\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Birth date</mat-label>\r\n                <input matInput [matDatepicker]=\"picker\" formControlName=\"birthDate\">\r\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #picker></mat-datepicker>\r\n                <mat-error *ngIf=\"contactsForm.get('birthDate').hasError('required')\">\r\n                  Please select date\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Address</mat-label>\r\n                <textarea matInput formControlName=\"address\"></textarea>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n              <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n                <mat-label>Note</mat-label>\r\n                <textarea matInput formControlName=\"note\"></textarea>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n              <div class=\"example-button-row\">\r\n                <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!contactsForm.valid\"\r\n                  [mat-dialog-close]=\"1\" (click)=\"confirmAdd()\">Save</button>\r\n                <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"isDetails\" class=\"contact-details\">\r\n      <div class=\"modalHeader\">\r\n        <div class=\"editRowModal\">\r\n          <div class=\"modalHeader clearfix\">\r\n            <div class=\"modal-about contact-header\">\r\n              <div class=\"contact-details-img\">\r\n                <img [src]='contacts.img' alt=\"avatar\">\r\n              </div>\r\n              <div class=\"contact-details-heading\">\r\n                <div class=\"contact-details-name mb-2\">{{contacts.name}}</div>\r\n                <div class=\"badge col-green\">Friends</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div mat-dialog-content>\r\n        <mat-card-content>\r\n          <div class=\"contact-details-field\">\r\n            <i class=\"material-icons-two-tone color-icon\">email</i>\r\n            <div class=\"contact-detail-info\"> {{contacts.email}}\r\n            </div>\r\n          </div>\r\n          <div class=\"contact-details-field\">\r\n            <i class=\"material-icons-two-tone color-icon\">phonelink_ring</i>\r\n            <div class=\"contact-detail-info\"> {{contacts.mobile}}\r\n            </div>\r\n          </div>\r\n          <div class=\"contact-details-field\">\r\n            <i class=\"material-icons-two-tone color-icon\">cake</i>\r\n            <div class=\"contact-detail-info\"> {{contacts.birthDate | date: 'MMMM d, yyyy'}}\r\n            </div>\r\n          </div>\r\n          <div class=\"contact-details-field\">\r\n            <i class=\"material-icons-two-tone color-icon\">location_on</i>\r\n            <div class=\"contact-detail-info\"> {{contacts.address}}\r\n            </div>\r\n          </div>\r\n          <div class=\"contact-details-field\">\r\n            <i class=\"material-icons-two-tone color-icon\">note</i>\r\n            <div class=\"contact-detail-info\"> {{contacts.note}}\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Component, Inject } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  Validators,\r\n  FormGroup,\r\n  FormBuilder\r\n} from '@angular/forms';\r\nimport { formatDate } from '@angular/common';\r\nimport { Contacts } from '../../contacts/contacts.model';\r\nimport { ContactsService } from '../../contacts/contacts.service';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.sass']\r\n})\r\nexport class EmployeeFormComponent {\r\n  action: string;\r\n  dialogTitle: string;\r\n  isDetails = false;\r\n  contactsForm: FormGroup;\r\n  contacts: Contacts;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EmployeeFormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    // Set the defaults\r\n    this.action = data.action;\r\n    if (this.action === 'edit') {\r\n      this.isDetails = false;\r\n      this.dialogTitle = data.contacts.name;\r\n      this.contacts = data.contacts;\r\n      this.contactsForm = this.createContactForm();\r\n    } else if (this.action === 'details') {\r\n      this.contacts = data.contacts;\r\n      this.isDetails = true;\r\n    } else {\r\n      this.isDetails = false;\r\n      this.dialogTitle = 'New Contacts';\r\n      this.contacts = new Contacts({});\r\n      this.contactsForm = this.createContactForm();\r\n    }\r\n  }\r\n  formControl = new FormControl('', [\r\n    Validators.required\r\n    // Validators.email,\r\n  ]);\r\n  getErrorMessage() {\r\n    return this.formControl.hasError('required')\r\n      ? 'Required field'\r\n      : this.formControl.hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  createContactForm(): FormGroup {\r\n    return this.fb.group({\r\n      id: [this.contacts.id],\r\n      img: [this.contacts.img],\r\n      name: [this.contacts.name],\r\n      email: [\r\n        this.contacts.email,\r\n        [Validators.required, Validators.email, Validators.minLength(5)]\r\n      ],\r\n      birthDate: [\r\n        formatDate(this.contacts.birthDate, 'yyyy-MM-dd', 'en'),\r\n        [Validators.required]\r\n      ],\r\n      address: [this.contacts.address],\r\n      mobile: [this.contacts.mobile],\r\n      note: [this.contacts.note]\r\n    });\r\n  }\r\n  submit() {\r\n    // emppty stuff\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  public confirmAdd(): void {\r\n    this.contactsService.addContacts(this.contactsForm.getRawValue());\r\n  }\r\n}\r\n\r\n"]}